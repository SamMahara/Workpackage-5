module ALU(
  input[7:0] clk,A,B,
  input [3:0] ALU_Sel,
    output reg ALU_out
);

reg ALU_result;
assign ALU_out = ALU_result

always@(posedge clk) //Triggered on rising edge clock
    begin
        case(ALU_Sel)
            4'b0000:  //Manually enumerate Addition = 00
                ALU_result = A + B;
            
            4'b0001:  //Manually enumerate Subtraction1 = 01
                ALU_result = A - B;

            4'b0010:  //Manually enumerate multiplication = 10
                ALU_result = A * B;
            
            4'b0011:  //Manually enumerate Division = 11
                ALU_result = A / B;
          
            4'b0100:  //Manually enumerate Addition of A = 00
                ALU_result = A * A;
          
            4'b0101:  //Manually enumerate Addition = 00
                ALU_result = A + B;
          
            4'b0110:  //Manually enumerate Addition = 00
                ALU_result = A + B;
          
            4'b0111:  //Manually enumerate Addition = 00
                ALU_result = A + B;
          
            4'b1000:  //Manually enumerate Addition = 00
                ALU_result = A + B;
          
            4'b1001:  //Manually enumerate Addition = 00
                ALU_result = A & B;
          
            4'b1010:  //Manually enumerate Addition = 00
                ALU_result = A ^ B;
          
            4'b1011:  //Manually enumerate Addition = 00
                ALU_result = A + B;
          
            4'b1100:  //Manually enumerate Addition = 00
                ALU_result = A + B;
          
            4'b1101:  //Manually enumerate Addition = 00
                ALU_result = A + B;
          
            4'b1110:  //Manually enumerate Addition = 00
                ALU_result = A + B;
          
            4'b1111:  //Manually enumerate Addition = 00
                ALU_result = A + B;
          
            default: ALU_result = A;
        endcase

        ALU_out <= ALU_result;
